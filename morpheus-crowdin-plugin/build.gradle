buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	dependencies {
		classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
	}
}

apply plugin: 'com.github.johnrengelman.shadow'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'asset-pipeline'

group = 'com.morpheusdata'
version = '1.2.0'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
repositories {
	mavenLocal()
	jcenter()
	mavenCentral()
}

configurations {
	provided
}

dependencies {
	provided project(':morpheus-plugin-api')
	implementation "org.codehaus.groovy:groovy-all:$groovyVersion"
	implementation "org.slf4j:slf4j-api:$slf4jVersion"
	implementation "org.slf4j:slf4j-parent:$slf4jVersion"

	// Include morpheus-core and it's dependencies
	testImplementation project(':morpheus-plugin-api')
	testImplementation 'io.reactivex.rxjava2:rxjava:2.2.0'
	testImplementation "org.slf4j:slf4j-parent:$slf4jVersion"

	testImplementation "org.codehaus.groovy:groovy-all:$groovyVersion"
	testImplementation project(':morpheus-test-provider')
	testImplementation 'net.bytebuddy:byte-buddy:1.9.3'
	testImplementation 'org.objenesis:objenesis:2.6'
	testImplementation "org.spockframework:spock-core:$spockVersion"
	testImplementation 'cglib:cglib-nodep:3.2.12'
}
configurations {
}

sourceSets {
	main {
		compileClasspath += configurations.provided
	}
}

assets {
	packagePlugin = false //set to true if this is a library
}


jar {
	manifest {
		attributes(
				'Plugin-Class': 'com.morpheusdata.crowdin.CrowdinPlugin',
				'Plugin-Version': archiveVersion.get()
		)
	}
}

java {
	withSourcesJar()
	withJavadocJar()
}

task morpheusJavaDoc(type: Javadoc) {
	source = sourceSets.main.allJava
	title = "Morpheus Core Docs"
}

task(console, dependsOn: 'classes', type: JavaExec) {
	main = 'groovy.ui.Console'
	classpath = sourceSets.main.runtimeClasspath
}

publishing {
	publications {
		maven(MavenPublication) {
			artifactId 'morpheus-test-provider'
			from components.java
		}
	}
}

test {
	testLogging {
		exceptionFormat = 'full'
		showStandardStreams = true
	}
}

tasks.withType(com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
	destinationDirectory = file("$rootDir/plugins")
}

tasks.assemble.dependsOn tasks.shadowJar